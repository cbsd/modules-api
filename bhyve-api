#!/usr/local/bin/cbsd
#v14.0.0
DIST_MODULE_PATH="${distmoduledir}/api.d"
. ${DIST_MODULE_PATH}/share/bhyve.conf
MYOPTARG="imgsize jname image ram cpus pubkey host_hostname extras ci_user_pw_user ci_user_pw_root bhyve_vnc_tcp_bind vm_os_type vm_os_profile"
MYARG="mode"
MYDESC="Operate with bhyve via API"
CBSDMODULE="sys"
ADDHELP="
${H3_COLOR}Description${N0_COLOR}:

Extra helper for jail creation via API

${H3_COLOR}General Options${N0_COLOR}:

${H3_COLOR}Examples${N0_COLOR}:

${H3_COLOR}See also${N0_COLOR}:

"
EXTHELP="wf_bhyve"
MODULE_PATH="${dbdir}/bhyve"

. ${subrdir}/nc.subr
dryrun=0
checkip=1
gold=0
develop=0
runasap=0
ip4_gw=
nodeip_expose=
nodeip_expose_ssh=
nodeip_expose_vnc=
nodeip_expose_rdp=

readconf bhyve-default-default.conf
readconf bhyve.conf

readconf api.conf
readconf bhyve-api.conf

[ -n "${ip4_gw}" ] && oip4_gw="${ip4_gw}"

# host variables
ssh_host=
vnc_host=
rdp_host=

# port
ssh_port=
vnc_port=
rdp_port=

set -e
. ${distmoduledir}/api.d/api.subr
set +e

MY_LOG="${cbsd_api_logdir}/bhyve-api.log"
log "wakeup: [workdir: ${workdir}, cbsdworkdir: ${cbsd_workdir}, api_postcreate_hook: ${api_postcreate_hook}, cbsd_api_dbdir: ${cbsd_api_dbdir}]: $*"

ip4_addr=
vm_os_type=
vm_os_profile=
ip4_addr=
ip4_gw=
vm_os_type=
vm_os_profile=

. ${cbsdinit}
. ${subrdir}/system.subr
. ${subrdir}/strings.subr

[ -z "${ip4_gw}" -a -n "${oip4_gw}" ] && ip4_gw="${oip4_gw}"

api_err()
{
	local _code="${1}"
	local _msg="${2}"
	echo -n "${jname}" > ${cbsd_api_dbdir}/${cid}/vm-${host_hostname}
	echo "${hostname}" > ${cbsd_api_dbdir}/${cid}/${jname}.node
	${CAT_CMD} > ${cbsd_api_dbdir}/${cid}/${jname}-bhyve.ssh <<EOF
{
  "Message": "${_msg}"
}
EOF

	err "${_code}" "${_msg}"
}

create_env()
{
	local _profile_file=
	ssh_user=
	ssh_port=

	cid=$( ${miscdir}/cbsd_md5 "${pubkey}" )

	# additional check for profile/type?
	# hier
	if [ ! -d ${cbsd_api_dbdir}/${cid} ]; then
		${MKDIR_CMD} -m 0770 -p ${cbsd_api_dbdir}/${cid}
		${CHOWN_CMD} ${cbsduser}:${cbsduser} ${cbsd_api_dbdir}/${cid}
	fi

	if [ ! -d ${cbsd_api_dbdir}/${cid}/.ssh ]; then
		${MKDIR_CMD} -m 0770 -p ${cbsd_api_dbdir}/${cid}/.ssh
		${CHOWN_CMD} ${cbsduser}:${cbsduser} ${cbsd_api_dbdir}/${cid}/.ssh
	fi

	if [ ! -r ${cbsd_api_dbdir}/${cid}/.ssh/authorized_keys ]; then
		echo "${pubkey}" > ${cbsd_api_dbdir}/${cid}/.ssh/authorized_keys
		${CHOWN_CMD} ${cbsduser}:${cbsduser} ${cbsd_api_dbdir}/${cid}/.ssh/authorized_keys
		sync
		#fflush?
		sleep 1
	fi
	if [ ! -d ${cbsd_api_dbdir}/${cid}/vms ]; then
		${MKDIR_CMD} -m 0770 -p ${cbsd_api_dbdir}/${cid}/vms
		${CHOWN_CMD} ${cbsduser}:${cbsduser} ${cbsd_api_dbdir}/${cid}/vms
	fi

	if [ "${image}" = "bhyve" -o -z "${image}" ]; then
		[ -z "${vm_os_type}" ] && api_err 1 "empty image and/or vm_os_type"
		[ -z "${vm_os_profile}" ] && api_err 1 "empty image and/or vm_os_profile"
		if [ -r "${workdir}/etc/vm-${vm_os_type}-${vm_os_profile}.conf" ]; then
			_profile_file="${workdir}/etc/vm-${vm_os_type}-${vm_os_profile}.conf"
		elif [ -r "${workdir}/etc/defaults/vm-${vm_os_type}-${vm_os_profile}.conf" ]; then
			_profile_file="${workdir}/etc/defaults/vm-${vm_os_type}-${vm_os_profile}.conf"
		fi
		[ -z "${_profile_file}" ] && api_err 1 "no such profile for type/profile: ${vm_os_type}-${vm_os_profile}"
		eval $( ${GREP_CMD} ^myb_image= ${_profile_file} 2>/dev/null )
		[ -z "${myb_image}" ] && api_err 1 "no such myb_image vars for type/profile: ${vm_os_type}-${vm_os_profile}"
		image="${myb_image}"
	else
		eval vm_os_type="\$${image}_vm_os_type"
		eval vm_os_profile="\$${image}_vm_os_profile"
	fi

	[ -z "${vm_os_type}" ] && api_err 1 "vm_os_type empty? check img/mapping in bhyve-api.conf for: ${image}"
	[ -z "${vm_os_profile}" ] && api_err 1 "vm_os_profile empty? check img/mapping in bhyve-api.conf for: ${image}"

	eval ssh_user="\$${image}_ssh_user"

	[ -z "${ssh_user}" ] && api_err 1 "ssh_user empty? check img/mapping in bhyve-api.conf for: ${image}"
	[ -z "${ssh_host}" ] && ssh_host="${nodeip}"

	# extras area
	v6_addr=
	v4_addr=
	primary_ip=
	ip4_addr=
	ossh_port=
	port=

	if [ -n "${extras}" ]; then
		# strip special: must be performed on the API first
		extras=$( echo ${extras} | ${TR_CMD} -dc '[:alnum:]:,\n\r' | ${TR_CMD} '[:upper:]' '[:lower:]' )
		log "EXTRAS [${extras}]"
	fi

	exec_extras=

	if [ -n "${extras}" ]; then

		for i in ${jail_known_extras}; do
			unset ${i}
		done

		OIFS="${IFS}"
		IFS=","
		for i in ${extras}; do
			IFS="${OIFS}"
			extras_name=$( echo ${i} | ${CUT_CMD} -d ":" -f 1 )
			known=0
			for x in ${jail_known_extras}; do
				log "extras check [${x}][${extras_name}]"
				if [ "${x}" = "${extras_name}" ]; then
					known=1
				fi
			done

			if [ ${known} -eq 1 ]; then
				#extras_val=$( echo ${i} | ${CUT_CMD} -d ":" -f 2 )
				_arg_len=$( strlen ${i} )
				strpos --str="${i}" --search=":"
				_eqpos=$?
				_eqpos=$(( _eqpos + 2 ))
				extras_val=$( substr --pos=${_eqpos} --len=${_arg_len} --str="${i}" )
				log "known extras found: ${extras_name}, val: [${extras_val}]"
				eval "${extras_name}=\"${extras_val}\""

				if [ -z "${exec_extras}" ]; then
					exec_extras="${extras_name}"
				else
					exec_extras="${exec_extras} ${extras_name}"
				fi
			else
				log "Unknown extras: ${extras_name}"
			fi
			IFS=","
		done
		IFS="${OIFS}"

		if [ "${ipv6}" = "external" ]; then
			v6_addr=$( dhcpdv6 )
			primary_ip="${v6_addr}"
			ssh_host="${primary_ip}"
			ossh_port="22"
			v4_addr=$( dhcpd ip4pool=${ip4pool} )
		else
			v4_addr=$( dhcpd ip4pool=${ip4pool} )
			primary_ip="${v4_addr}"
		fi
	else
		v4_addr=$( dhcpd ip4pool=${ip4pool} )
		primary_ip="${v4_addr}"
	fi

	if [ -n "${ci_gw42}" ]; then
		v6_addr=$( dhcpdv6 )
	fi

	log "exec extras: ${exec_extras}"

	for i in ${exec_extras}; do
		log "looking for helper : ${i}"
		#helper_var="extras_helper_${i}"
		#log "looking for helper : ${helper_var}"
		#eval helper="\$helper_var"

		eval helper="\$extras_helper_$i"

		if [ -x "${helper}" ]; then
			log "HELPER FOUND for ${i}: [${helper}]"
			letsencrypt_args=
			[ -n "${letsencrypt}" ] && letsencrypt_args="-l true"
			log "EXEC HELPER: ${helper} -m create -n \"${lb}\" -a \"${v4_addr}\" -b \"${v6_addr}\" ${letsencrypt_args}"
			${helper} -m create -n "${lb}" -a "${v4_addr}" -b "${v6_addr}" ${letsencrypt_args} >> ${MY_LOG} 2>&1
			ret=$?
			# todo: notify for error
		else
			log "HELPER for ${i} not found: ${helper}!"
		fi
	done

	ip4_addr="${v4_addr}"

#	for i in ${v4_addr} ${v6_addr}; do
#		if [ -z "${ip4_addr}" ]; then
#			ip4_addr="${i}"
#		else
#			ip4_addr="${ip4_addr},${i}"
#		fi
#	done

	#ip4_addr=$( dhcpd ip4pool=${ip4pool} )
	[ -z "${ip4_gw}" ] && ip4_gw="10.0.0.1"

	if [ -n "${host_hostname}" ]; then
		ci_fqdn="${host_hostname}"
	else
		ci_fqdn="${jname}.my.domain"
	fi
	ci_jname="${ci_fqdn}"

	ci_ip4_addr="${ip4_addr}"
	ci_gw4="${ip4_gw}"

	[ -z "${vm_os_type}" ] && err 1 "no vm_os_type"
	[ -z "${vm_os_profile}" ] && err 1 "no vm_os_profile"

	if [ -n "${ci_gw42}" ]; then
		str="cbsd bcreate jname=${jname} runasap=1 vm_cpus=${cpus} vm_ram=${ram} imgsize=${imgsize} vm_os_type=\"${vm_os_type}\" vm_os_profile=\"${vm_os_profile}\" ci_fqdn=\"${ci_fqdn}\" ci_ip4_addr=\"${ip4_addr}\" ci_gw4=\"${ip4_gw}\" ip4_addr=\"${ip4_addr}\" ci_user_pubkey=\"${cbsd_api_dbdir}/${cid}/.ssh/authorized_keys\" ci_jname=\"${ci_jname}\" ci_ip4_addr2=\"${v6_addr}\" ci_user_pw_root=\"cbsd\""
	else
		str="cbsd bcreate jname=${jname} runasap=1 vm_cpus=${cpus} vm_ram=${ram} imgsize=${imgsize} vm_os_type=\"${vm_os_type}\" vm_os_profile=\"${vm_os_profile}\" ci_fqdn=\"${ci_fqdn}\" ci_ip4_addr=\"${ip4_addr}\" ci_gw4=\"${ip4_gw}\" ip4_addr=\"${ip4_addr}\" ci_user_pubkey=\"${cbsd_api_dbdir}/${cid}/.ssh/authorized_keys\" ci_jname=\"${ci_jname}\""
	fi

	[ -n "${bhyve_vnc_tcp_bind}" ] && str="${str} bhyve_vnc_tcp_bind=\"${bhyve_vnc_tcp_bind}\""
	[ -n "${ci_user_pw_user}" ] && str="${str} ci_user_pw_user=\"${ci_user_pw_user}\""
	[ -n "${ci_user_pw_root}" ] && str="${str} ci_user_pw_root=\"${ci_user_pw_root}\""

	log "${str}"
	${str}

	max_retry=20
	retry=0

	# inherit workdir from CBSD/API?
	. /etc/rc.conf

	while [ ${retry} -lt ${max_retry} ]; do
		if [ -r ${cbsd_workdir}/vm/${jname}/vnc_port ]; then
			vnc_file_stat=$( ${STAT_CMD} -f "%z" ${cbsd_workdir}/vm/${jname}/vnc_port 2>/dev/null )
			[ ${vnc_file_stat} -gt 0 ] && break
		fi
		sleep 1
		retry=$(( retry + 1 ))
	done

	[ -r ${cbsd_workdir}/vm/${jname}/rc.conf_${jname} ] && . ${cbsd_workdir}/vm/${jname}/rc.conf_${jname}

	if [ ${retry} -gt ${max_retry} ]; then
		log "unable to read vnc port file: ${cbsd_workdir}/vm/${jname}/vnc_port"
		err 1 "unable to read vnc port file: ${cbsd_workdir}/vm/${jname}/vnc_port"
	fi

	# for slow hdd/vm startup
	sleep 5

	original_vnc_port=$( ${HEAD_CMD} -n1 ${cbsd_workdir}/vm/${jname}/vnc_port | ${AWK_CMD} '{printf $1}' )
	log "expose settings: nodeip_expose:${nodeip_expose}, nodeip_expose_ssh=${nodeip_expose_ssh}, nodeip_expose_vnc=${nodeip_expose_vnc}, nodeip_expose_rdp=${nodeip_expose_rdp}"

	### SSH access
	_ssh_expose=0
	[ "${nodeip_expose}" = "1" ] && _ssh_expose=1
	if [ -n "${nodeip_expose_ssh}" ]; then
		if [ "${nodeip_expose_ssh}" = "1" ]; then
			_ssh_expose=1
		else
			_ssh_expose=0
		fi
	fi

	if [ "${_ssh_expose}" = "0" ]; then
		ssh_port=22
		ssh_host="${ip4_addr}"
	else
		ssh_port=$(( original_vnc_port + 3000 ))
		ssh_host="${nodeip}"
		log "expose mode=add jname=${jname} in=${ssh_port} out=22"
		expose mode=add jname=${jname} in=${ssh_port} out=22 >> ${MY_LOG}
	fi

	### VNC access
	_vnc_expose=0
	[ "${nodeip_expose}" = "1" ] && _vnc_expose=1
	if [ -n "${nodeip_expose_ssh}" ]; then
		if [ "${nodeip_expose_vnc}" = "1" ]; then
			_vnc_expose=1
		else
			_vnc_expose=0
		fi
	fi
	if [ "${_vnc_expose}" = "0" ]; then
		vnc_port=${original_vnc_port}
		vnc_host="127.0.0.1"
	else
		vnc_port=$(( original_vnc_port + 3001 ))
		vnc_host="${nodeip}"
		log "expose mode=add jname=${jname} in=${vnc_port} out=${original_vnc_port} outaddr=127.0.0.1"
		expose mode=add jname=${jname} in=${vnc_port} out=${original_vnc_port} outaddr=127.0.0.1 >> ${MY_LOG}
	fi

	### RDP access, VDI only (check)
	_rdp_expose=0
	[ "${nodeip_expose}" = "1" ] && _rdp_expose=1
	if [ -n "${nodeip_expose_rdp}" ]; then
		if [ "${nodeip_expose_rdp}" = "1" ]; then
			_rdp_expose=1
		else
			_rdp_expose=0
		fi
	fi
	if [ "${_rdp_expose}" = "0" ]; then
		rdp_port=3389
		rdp_host="${ip4_addr}"
	else
		rdp_port=$(( original_vnc_port + 3002 ))
		rdp_host="${nodeip}"
		log "expose mode=add jname=${jname} in=${rdp_port} out=3389"
		expose mode=add jname=${jname} in=${rdp_port} out=3389 >> ${MY_LOG}
	fi

	if [ -n "${api_ip4_pool}" ]; then
		my_extv4=$( /usr/local/bin/cbsd dhcpd ip4pool=${api_ip4_pool} )
	fi

	# for test only
	if [ -n "${my_extv4}" ]; then
		cat > /usr/jails/jails-system/${jname}/master_poststart.d/v4 <<EOF
#!/bin/sh
/sbin/ifconfig ix1 add ${my_extv4}/28
/usr/local/bin/cbsd expose mode=add jname=${jname} inaddr=${my_extv4}
EOF
		/sbin/ifconfig ix1 add ${my_extv4}/28
		/usr/local/bin/cbsd expose mode=add jname=${jname} inaddr=${my_extv4}

		cat > /usr/jails/jails-system/${jname}/master_poststop.d/v4 <<EOF
#!/bin/sh
/sbin/ifconfig ix1 delete ${my_extv4}
/usr/local/bin/cbsd expose mode=delete jname=${jname} inaddr=${my_extv4}
EOF
		chmod +x /usr/jails/jails-system/${jname}/master_poststop.d/v4 /usr/jails/jails-system/${jname}/master_poststart.d/v4
		ssh4_host="${my_extv4}"
	fi

	if is_number "${imgsize}"; then
		if conv2bytes ${imgsize}; then
			imgsize_bytes="${convval}"
		else
			imgsize_bytes="0"
		fi
	else
		# already on bytes?
		imgsize_bytes="${imgsize}"
	fi

	if is_number "${ram}"; then
		if conv2bytes ${ram}; then
			ram_bytes="${convval}"
		else
			ram_bytes="0"
		fi
	else
		# already on bytes?
		ram_bytes="${ram}"
	fi

	if conv2human "${ram_bytes}"; then
		ram="${convval}"
	fi
	if conv2human "${imgsize_bytes}"; then
		imgsize="${convval}"
	fi

	create_time=$( ${DATE_CMD} -u "+%Y-%m-%dT%H:%M:%S" )
	[ -z "${port4}" ] && port4="${port}"
	[ -z "${port6}" ] && port6="22"
	[ -z "${ssh4_host}" ] && ssh4_host="${v4_addr}"
	[ -z "${ssh6_host}" ] && ssh6_host="${v6_addr}"

	if [ "${port4_real}" = "1" ]; then
		port4="22"
	fi

	#echo "${host_hostname} (${vm_os_type}:${vm_os_profile}) ${cpus}/${ram}/${imgsize} ssh ${ssh_user}@${ssh_host} -p${port}" > ${cbsd_api_dbdir}/${cid}/vms/${jname}

	if [ -z "${mq_tube}" ]; then
		hostname=$( hostname )
	else
		hostname="${mq_tube}"
	fi

	if [ "${cbsd_vdi_image}" = "1" ]; then
		port4=3389
		port6=3389
		rdp_user="${cbsd_vdi_user}"
		rdp_password="${cbsd_vdi_password}"
		rdp4_host="${ssh4_host}"
		rdp6_host="${ssh6_host}"
		rdp4_port="${port4}"
		rdp6_port="${port6}"
		[ -z "${rdp6_port}" ] && rdp6_port="${rdp4_port}"
		ssh_user=
		ssh_host=
		ssh_port=
		ssh4_host=
		ssh6_host=
		ssh4_port=
		ssh6_port=
	else
		rdp_user=
		rdp_password=
		rdp_host=
		rdp_port=
	fi

	echo "${hostname}" > ${cbsd_api_dbdir}/${cid}/${jname}.node
	${CAT_CMD} > ${cbsd_api_dbdir}/${cid}/${jname}-bhyve.ssh <<EOF
{
  "id": "${ci_jname}",
  "type": "vm",
  "emulator": "bhyve",
  "is_power_on": true,
  "created": "${create_time}",
  "cpus": ${cpus},
  "ram": "${ram}",
  "ram_bytes": ${ram_bytes},
  "ram_human": "${ram}",
  "imgsize_bytes": ${imgsize_bytes},
  "imgsize": "${imgsize}",
  "vm_os_type": "${vm_os_type}",
  "vm_os_profile": "${vm_os_profile}",
  "image": "${image}",
EOF

if [ -n "${ssh_user}" ]; then
${CAT_CMD} >> ${cbsd_api_dbdir}/${cid}/${jname}-bhyve.ssh <<EOF
  "ssh_user": "${ssh_user}",
EOF
fi
if [ -n "${ssh_host}" ]; then
${CAT_CMD} >> ${cbsd_api_dbdir}/${cid}/${jname}-bhyve.ssh <<EOF
  "ssh_host": "${ssh_host}",
EOF
fi
if [ -n "${ssh4_user}" ]; then
${CAT_CMD} >> ${cbsd_api_dbdir}/${cid}/${jname}-bhyve.ssh <<EOF
  "ssh4_host": "${ssh4_host}",
EOF
fi
if [ -n "${ssh6_host}" ]; then
${CAT_CMD} >> ${cbsd_api_dbdir}/${cid}/${jname}-bhyve.ssh <<EOF
  "ssh6_host": "${ssh6_host}",
EOF
fi
if [ -n "${ssh_port}" ]; then
${CAT_CMD} >> ${cbsd_api_dbdir}/${cid}/${jname}-bhyve.ssh <<EOF
  "ssh_port": ${ssh_port},
EOF
fi
if [ -n "${ssh4_port}" ]; then
${CAT_CMD} >> ${cbsd_api_dbdir}/${cid}/${jname}-bhyve.ssh <<EOF
  "ssh4_port": ${ssh4_port},
EOF
fi
if [ -n "${ssh6_port}" ]; then
${CAT_CMD} >> ${cbsd_api_dbdir}/${cid}/${jname}-bhyve.ssh <<EOF
  "ssh6_port": ${ssh6_port},
EOF
fi
if [ -n "${rdp_user}" ]; then
${CAT_CMD} >> ${cbsd_api_dbdir}/${cid}/${jname}-bhyve.ssh <<EOF
  "rdp_user": "${rdp_user}",
EOF
fi
if [ -n "${rdp_password}" ]; then
${CAT_CMD} >> ${cbsd_api_dbdir}/${cid}/${jname}-bhyve.ssh <<EOF
  "rdp_password": "${rdp_password}",
EOF
fi
if [ -n "${rdp_host}" ]; then
${CAT_CMD} >> ${cbsd_api_dbdir}/${cid}/${jname}-bhyve.ssh <<EOF
  "rdp_host": "${rdp_host}",
EOF
fi
if [ -n "${rdp_port}" ]; then
${CAT_CMD} >> ${cbsd_api_dbdir}/${cid}/${jname}-bhyve.ssh <<EOF
  "rdp_port": ${rdp_port},
EOF
fi
if [ -n "${rdp4_host}" ]; then
${CAT_CMD} >> ${cbsd_api_dbdir}/${cid}/${jname}-bhyve.ssh <<EOF
  "rdp4_host": "${rdp4_host}",
EOF
fi
if [ -n "${rdp4_port}" ]; then
${CAT_CMD} >> ${cbsd_api_dbdir}/${cid}/${jname}-bhyve.ssh <<EOF
  "rdp4_port": ${rdp4_port},
EOF
fi
if [ -n "${rdp6_host}" ]; then
${CAT_CMD} >> ${cbsd_api_dbdir}/${cid}/${jname}-bhyve.ssh <<EOF
  "rdp6_host": "${rdp6_host}",
EOF
fi
if [ -n "${rdp6_port}" ]; then
${CAT_CMD} >> ${cbsd_api_dbdir}/${cid}/${jname}-bhyve.ssh <<EOF
  "rdp6_port": ${rdp6_port},
EOF
fi

## VNC REDIR
${CAT_CMD} >> ${cbsd_api_dbdir}/${cid}/${jname}-bhyve.ssh <<EOF
  "vnc_port": ${vnc_port},
  "vnc_password": "cbsd",
  "vnc_host": "${vnc_host}",
EOF

	case "${cbsd_vdi_image}" in
		1)
			${CAT_CMD} >> ${cbsd_api_dbdir}/${cid}/${jname}-bhyve.ssh <<EOF
  "rdp_string": "xfreerdp +clipboard +fonts /rfx /size:1920x1200 /u:${rdp_user} /p:${rdp_password} /v:${rdp_host}:${rdp_port}",
  "rdp4_string": "xfreerdp +clipboard +fonts /rfx /size:1920x1200 /u:${rdp_user} /p:${rdp_password} /v:${rdp4_host}:${port4}",
  "rdp6_string": "xfreerdp +clipboard +fonts /rfx /size:1920x1200 /u:${rdp_user} /p:${rdp_password} /v:[${rdp6_host}]:${port6}"
}
EOF
			;;
		*)
			${CAT_CMD} >> ${cbsd_api_dbdir}/${cid}/${jname}-bhyve.ssh <<EOF
  "ssh_port": ${ssh_port},
  "ssh_string": "ssh ${ssh_user}@${ssh_host} -p${ssh_port}",
  "ssh4_string": "ssh ${ssh_user}@${ssh4_host} -p${port4}",
  "ssh6_string": "ssh ${ssh_user}@${ssh6_host} -p${port6}"
}
EOF
			;;
	esac

        # dup to param-values
	${CAT_CMD} > ${cbsd_api_dbdir}/${cid}/vms/${jname} <<EOF
host_hostname="${host_hostname}"
gid="${jname}"
hostname="${hostname}"
type="vm"
emulator="bhyve"
is_power_on="true"
created="${create_time}"
cpus="${cpus}"
ram_bytes="${ram_bytes}"
ram="${ram}"
imgsize_bytes="${imgsize_bytes}"
imgsize="${imgsize}"
vm_os_type="${vm_os_type}"
vm_os_profile="${vm_os_profile}"
ssh_user="${ssh_user}"
ssh_host="${ssh_host}"
ssh4_host="${ssh4_host}"
ssh6_host="${ssh6_host}"
ssh_port="${ssh_port}"
ssh_port4="${port4}"
ssh_port6="${port6}"
EOF

	case "${cbsd_vdi_image}" in
		1)
			${CAT_CMD} >> ${cbsd_api_dbdir}/${cid}/vms/${jname} <<EOF
ssh_string="xfreerdp +clipboard +fonts /rfx /size:1920x1200 /u:Admin /v:${ssh_host}:${ssh_port}"
ssh4_string="xfreerdp +clipboard +fonts /rfx /size:1920x1200 /u:Admin /v:${ssh4_host}:${port4}"
ssh6_string="xfreerdp +clipboard +fonts /rfx /size:1920x1200 /u:Admin /v:${ssh6_host}:${port6}"
EOF
			;;
		*)
			${CAT_CMD} >> ${cbsd_api_dbdir}/${cid}/vms/${jname} <<EOF
ssh_string="ssh ${ssh_user}@${ssh_host} -p${ssh_port}"
ssh4_string="ssh ${ssh_user}@${ssh4_host} -p${port4}"
ssh6_string="ssh ${ssh_user}@${ssh6_host} -p${port6}"
EOF
			;;
	esac

	${CHOWN_CMD} ${cbsduser}:${cbsduser} ${cbsd_api_dbdir}/${cid}/vms/${jname} ${cbsd_api_dbdir}/${cid}/${jname}.node ${cbsd_api_dbdir}/${cid}/${jname}-bhyve.ssh

	[ -n "${api_postcreate_hook}" -a -x "${api_postcreate_hook}" ] && ${api_postcreate_hook} -c "${cid}" -j "${jname}" -m create -r "${cbsd_api_dbdir}" -w "${cbsd_workdir}"
}

## MAIN
case "${mode}" in
	create)
		create_env
		;;
esac

# temporary hack/mock for standalone no-DB API version
[ -x /root/bin/tubestat.sh ] && /root/bin/tubestat.sh > /dev/null 2>&1
[ -x /root/bin/update_cluster_status.sh ] && /root/bin/update_cluster_status.sh > /dev/null 2>&1

exit 0
